{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MDK-Toolbox user's guide The MDK-Toolbox consists of the following utilities: FCARM , a file converter that reformats web files into a single C source file which is then included and compiled into a project. ElfDwT , a command-line utility that computes and writes a signature into the application image file. uv2csolution , a command-line utility that converts \u00b5Vision projects to CMSIS solution format . Mbed TLS/cert_write , an application that signs a certificate signing request, or self-signs a certificate. Mbed TLS/gen_key , an application that generates a key for any of the supported public-key algorithms (RSA or ECC). Manual chapters Installation FCARM ElfDwt uv2csolution Licenses External documentation Mbed TLS/cert_write Mbed TLS/gen_key: RSA key pair generator How to generate a Certificate Request (CSR) How to generate a self-signed certificate","title":"Home"},{"location":"#mdk-toolbox-users-guide","text":"The MDK-Toolbox consists of the following utilities: FCARM , a file converter that reformats web files into a single C source file which is then included and compiled into a project. ElfDwT , a command-line utility that computes and writes a signature into the application image file. uv2csolution , a command-line utility that converts \u00b5Vision projects to CMSIS solution format . Mbed TLS/cert_write , an application that signs a certificate signing request, or self-signs a certificate. Mbed TLS/gen_key , an application that generates a key for any of the supported public-key algorithms (RSA or ECC).","title":"MDK-Toolbox user's guide"},{"location":"#manual-chapters","text":"Installation FCARM ElfDwt uv2csolution Licenses","title":"Manual chapters"},{"location":"#external-documentation","text":"Mbed TLS/cert_write Mbed TLS/gen_key: RSA key pair generator How to generate a Certificate Request (CSR) How to generate a self-signed certificate","title":"External documentation"},{"location":"01_installation/","text":"Installation There are three ways how to install the MDK-Toolbox. The first two can be used to install the tools on the command line, while the third approach is used in the Visual Studio Code GUI. Using vcpkg - a free C/C++ package manager for acquiring and managing libraries. Direct access via curl or wget. Using an extension in VS Code. Using vcpkg vcpkg is runs on all platforms, build systems, and work flows. Installation If you have not done it before, install vcpkg : In a Windows command shell, type: curl -LO https://aka.ms/vcpkg-init.cmd && .\\vcpkg-init.cmd In a Windows PowerShell, type: iex (iwr -useb https://aka.ms/vcpkg-init.ps1) In a macOS/Linux terminal, type: . <(curl https://aka.ms/vcpkg-init.sh -L) Initialization In a Windows command shell, type: %USERPROFILE%\\.vcpkg\\vcpkg-init.cmd In a Windows PowerShell, type: . ~/.vcpkg/vcpkg-init.ps1 In a macOS/Linux terminal, type: . ~/.vcpkg/vcpkg-init Update vcpkg registry Update the Arm vcpkg registry to get access to tools hosted by Arm: vcpkg-shell x-update-registry arm Enable the MDK-Toolbox: vcpkg-shell use mdk-toolbox Direct access The MDK-Toolbox is available for download in the Arm Tools Artifactory . Download the right compressed archive for your host operating system: In a Windows terminal, type: curl --output mdk-toolbox-windows-amd64.zip https://artifacts.tools.arm.com/mdk-toolbox/1.0.0/mdk-toolbox-windows-amd64.zip In a macOS terminal, type: curl --output mdk-toolbox-darwin-amd64.tar.gz https://artifacts.tools.arm.com/mdk-toolbox/1.0.0/mdk-toolbox-darwin-amd64.tar.gz In a Linux terminal, type: curl --output mdk-toolbox-linux-amd64.tar.gz https://artifacts.tools.arm.com/mdk-toolbox/1.0.0/mdk-toolbox-linux-amd64.tar.gz Unzip the file. Set your PATH variable to the bin directory of the unzipped package. Using an extension The Arm Environment Manager extension for Visual Studio Code is using vcpkg for tools installation. It already ships with the package manager so that there is no need for the user to manually install vcpkg. In a CMSIS Solution project, create a file called vcpkg_configuration.json that controls the download of additional tools. Add the following: Add the Arm artifactory registry to the list of registries: { \"name\": \"arm\", \"kind\": \"artifact\", \"location\": \"https://artifacts.tools.arm.com/vcpkg-ce-registry/registry.zip\" } Add the mdk-toolbox in the requirement list: \"arm:mdk-toolbox\": \"^1.0.0\" Refer to the Arm Environment Manager documentation for more information.","title":"Installation"},{"location":"01_installation/#installation","text":"There are three ways how to install the MDK-Toolbox. The first two can be used to install the tools on the command line, while the third approach is used in the Visual Studio Code GUI. Using vcpkg - a free C/C++ package manager for acquiring and managing libraries. Direct access via curl or wget. Using an extension in VS Code.","title":"Installation"},{"location":"01_installation/#using-vcpkg","text":"vcpkg is runs on all platforms, build systems, and work flows.","title":"Using vcpkg"},{"location":"01_installation/#installation_1","text":"If you have not done it before, install vcpkg : In a Windows command shell, type: curl -LO https://aka.ms/vcpkg-init.cmd && .\\vcpkg-init.cmd In a Windows PowerShell, type: iex (iwr -useb https://aka.ms/vcpkg-init.ps1) In a macOS/Linux terminal, type: . <(curl https://aka.ms/vcpkg-init.sh -L)","title":"Installation"},{"location":"01_installation/#initialization","text":"In a Windows command shell, type: %USERPROFILE%\\.vcpkg\\vcpkg-init.cmd In a Windows PowerShell, type: . ~/.vcpkg/vcpkg-init.ps1 In a macOS/Linux terminal, type: . ~/.vcpkg/vcpkg-init","title":"Initialization"},{"location":"01_installation/#update-vcpkg-registry","text":"Update the Arm vcpkg registry to get access to tools hosted by Arm: vcpkg-shell x-update-registry arm Enable the MDK-Toolbox: vcpkg-shell use mdk-toolbox","title":"Update vcpkg registry"},{"location":"01_installation/#direct-access","text":"The MDK-Toolbox is available for download in the Arm Tools Artifactory . Download the right compressed archive for your host operating system: In a Windows terminal, type: curl --output mdk-toolbox-windows-amd64.zip https://artifacts.tools.arm.com/mdk-toolbox/1.0.0/mdk-toolbox-windows-amd64.zip In a macOS terminal, type: curl --output mdk-toolbox-darwin-amd64.tar.gz https://artifacts.tools.arm.com/mdk-toolbox/1.0.0/mdk-toolbox-darwin-amd64.tar.gz In a Linux terminal, type: curl --output mdk-toolbox-linux-amd64.tar.gz https://artifacts.tools.arm.com/mdk-toolbox/1.0.0/mdk-toolbox-linux-amd64.tar.gz Unzip the file. Set your PATH variable to the bin directory of the unzipped package.","title":"Direct access"},{"location":"01_installation/#using-an-extension","text":"The Arm Environment Manager extension for Visual Studio Code is using vcpkg for tools installation. It already ships with the package manager so that there is no need for the user to manually install vcpkg. In a CMSIS Solution project, create a file called vcpkg_configuration.json that controls the download of additional tools. Add the following: Add the Arm artifactory registry to the list of registries: { \"name\": \"arm\", \"kind\": \"artifact\", \"location\": \"https://artifacts.tools.arm.com/vcpkg-ce-registry/registry.zip\" } Add the mdk-toolbox in the requirement list: \"arm:mdk-toolbox\": \"^1.0.0\" Refer to the Arm Environment Manager documentation for more information.","title":"Using an extension"},{"location":"02_fcarm/","text":"File Converter fcarm This file converter reformats all web files into a single C-file which is then included and compiled into the project. fcarm is invoked from the command line and has the syntax: fcarm @commandfile Where commandfile is the name of a command file that can contain an inputlist , an outputfile , and directives . or fcarm {inputlist} to {outputfile} {directives} Where inputlist is a comma-separated list of files. The files get converted into one output file. Filenames must be specified with the file extension, but without the path information. outputfile name of the output C-file containing the converted web files. directives commands and parameters that control the operation of the file converter. Available directives: Directive Description PRINT Specify the name of the listing file. Default is the base name of the output C-file with the extension *.LST. NOPRINT Disables generation of the listing (LST) file. PAGEWIDTH Specifies the number of characters on a line in the listing file. PAGELENGTH Specifies the number of lines on a page in the listing file. ROOT Specifies the root path where web files are located relative to the project directory path. In addition to the output file, fcarm generates a listing file with the base name of the output file and the extension *.LST. Optimization fcarm integrates a file optimization algorithm to compress files and creates more compact and smaller executable images. fcarm decides on the file extension which kind of compression is used. Each file group has a different compression and optimization flavor. When the filename has the tilde prefix (for example, ~doStuff.js) then compression or certain compression optimizations are disabled. This is useful when debugging a file. It is hard to trace code compacted to a single line with no spaces, no comments, and no line feeds. Compression and optimization is performed in two iterations. In a 2nd pass, further optimization is performed resulting in better code density. Group Extension Optimization ~Optimization (disabled) HTML html htm inc HTML compression Performs the following optimizations: replaces tab characters with spaces removesline-termination CR-LF characters replacesmultiple spaces with a single space removes leading and trailing spaces removes space between two html tags (for example, \"<ul> <li>\") no compression CGI cgi cgx CGI compression Optimizes scripts for maximum performance on TCPnet web server: checks the script syntax replaces T,C,I,# script commands with tokens replaces tab characters with spaces removes line-termination CR-LF characters removes multiple spaces removes comments from script lines groups small t-commands white space removal but without grouping of small t-commands CSS css CSS compression Parses and removes redundant information: replaces multiple spaces with a single space removes line-termination CR-LF characters replaces tab characters with spaces removes \"/*\" and \"//\" style comments removes redundant spaces inserted in the 1 st step removes spaces nearby a delimiter: :;{} no optimization JS js JS compression Parses and removes redundant information: replaces tab characters with spaces replaces multiple spaces with a single space removes line-termination CR-LF characters removes \"/*\" and \"//\" style comments removes redundant spaces inserted in the 1 st step removes spaces nearby a delimiter: .,:;=!+-*/&|<>(){}\"? no optimization others .* not affected not affected Examples The following command line converts and optimizes index.htm , creates the output C-file index.c , and creates the listing file index.lst : fcarm index.htm The following command line converts and optimizes a list of files, creates the output C-file web.c , and creates the listing file web.lst : fcarm index.htm, keil.gif, llblue.jpg, system.cgi TO web.c The following command line converts and optimizes a list of files, creates the output C-file web.c , and suppresses the creation of the listing file ( nopr directive). The files are located in the sub-folder Web_Files : fcarm index.htm, keil.gif, llblue.jpg, system.cgi TO web.c nopr root(Web_Files) The following command line converts and optimizes a list of files, creates the output C-file web.c , and creates the listing file web.lst . The file doStuff.js is excluded from optimization: fcarm index.htm, keil.gif, llblue.jpg, system.cgi, ~doStuff.js TO web.c The following command line uses a command file: fcarm @fcarm_command_file Directives PRINT The PRINT directive specifies the name of the listing file. If no PRINT directive is specified the listing file is given the name of the generated c-source file with a .LST extension. Abbreviation: PR Arguments: PRINT (filename) Default: The name of the generated listing file with a .LST extension. See also: NOPRINT Example fcarm index.htm, keil.gif to web.c print (Sample.lst) NOPRINT The NOPRINT directive prevents the file converter from generating a listing file. Abbreviation: NOPR Arguments: NOPRINT Default: The name of the generated listing file with a .LST extension. See also: PRINT Example fcarm index.htm, keil.gif to web.c noprint PAGEWIDTH The PAGEWIDTH directive specifies the number of character per line that may be printed to the converter listing file. Lines with more than the specified number of characters are broken into two or more lines. The valid range of values is 72-132 columns. Abbreviation: PW Arguments: PAGEWIDTH (number) Default: PAGEWIDTH (132) See also: PAGELENGTH Example fcarm index.htm to web.c pagewidth (132) PAGELENGTH The PAGELENGTH directive specifies the number of lines printed per page in the converter listing file. The minimum page length is 10 lines per page. The maximum page length is 65535. Abbreviation: PL Arguments: PAGELENGTH (number) Default: PAGELENGTH (60) See also: PAGEWIDTH Example fcarm index.htm to web.c pagelength (55) ROOT The ROOT directive defines the root path where the web files are located relative to the project directory path. Abbreviation: RO Arguments: ROOT (directory) Default: The current project directory path is used as the web container. Example fcarm index.htm, keil.gif to web.c root(Web_Files)","title":"fcarm"},{"location":"02_fcarm/#file-converter-fcarm","text":"This file converter reformats all web files into a single C-file which is then included and compiled into the project. fcarm is invoked from the command line and has the syntax: fcarm @commandfile Where commandfile is the name of a command file that can contain an inputlist , an outputfile , and directives . or fcarm {inputlist} to {outputfile} {directives} Where inputlist is a comma-separated list of files. The files get converted into one output file. Filenames must be specified with the file extension, but without the path information. outputfile name of the output C-file containing the converted web files. directives commands and parameters that control the operation of the file converter. Available directives: Directive Description PRINT Specify the name of the listing file. Default is the base name of the output C-file with the extension *.LST. NOPRINT Disables generation of the listing (LST) file. PAGEWIDTH Specifies the number of characters on a line in the listing file. PAGELENGTH Specifies the number of lines on a page in the listing file. ROOT Specifies the root path where web files are located relative to the project directory path. In addition to the output file, fcarm generates a listing file with the base name of the output file and the extension *.LST.","title":"File Converter fcarm"},{"location":"02_fcarm/#optimization","text":"fcarm integrates a file optimization algorithm to compress files and creates more compact and smaller executable images. fcarm decides on the file extension which kind of compression is used. Each file group has a different compression and optimization flavor. When the filename has the tilde prefix (for example, ~doStuff.js) then compression or certain compression optimizations are disabled. This is useful when debugging a file. It is hard to trace code compacted to a single line with no spaces, no comments, and no line feeds. Compression and optimization is performed in two iterations. In a 2nd pass, further optimization is performed resulting in better code density. Group Extension Optimization ~Optimization (disabled) HTML html htm inc HTML compression Performs the following optimizations: replaces tab characters with spaces removesline-termination CR-LF characters replacesmultiple spaces with a single space removes leading and trailing spaces removes space between two html tags (for example, \"<ul> <li>\") no compression CGI cgi cgx CGI compression Optimizes scripts for maximum performance on TCPnet web server: checks the script syntax replaces T,C,I,# script commands with tokens replaces tab characters with spaces removes line-termination CR-LF characters removes multiple spaces removes comments from script lines groups small t-commands white space removal but without grouping of small t-commands CSS css CSS compression Parses and removes redundant information: replaces multiple spaces with a single space removes line-termination CR-LF characters replaces tab characters with spaces removes \"/*\" and \"//\" style comments removes redundant spaces inserted in the 1 st step removes spaces nearby a delimiter: :;{} no optimization JS js JS compression Parses and removes redundant information: replaces tab characters with spaces replaces multiple spaces with a single space removes line-termination CR-LF characters removes \"/*\" and \"//\" style comments removes redundant spaces inserted in the 1 st step removes spaces nearby a delimiter: .,:;=!+-*/&|<>(){}\"? no optimization others .* not affected not affected","title":"Optimization"},{"location":"02_fcarm/#examples","text":"The following command line converts and optimizes index.htm , creates the output C-file index.c , and creates the listing file index.lst : fcarm index.htm The following command line converts and optimizes a list of files, creates the output C-file web.c , and creates the listing file web.lst : fcarm index.htm, keil.gif, llblue.jpg, system.cgi TO web.c The following command line converts and optimizes a list of files, creates the output C-file web.c , and suppresses the creation of the listing file ( nopr directive). The files are located in the sub-folder Web_Files : fcarm index.htm, keil.gif, llblue.jpg, system.cgi TO web.c nopr root(Web_Files) The following command line converts and optimizes a list of files, creates the output C-file web.c , and creates the listing file web.lst . The file doStuff.js is excluded from optimization: fcarm index.htm, keil.gif, llblue.jpg, system.cgi, ~doStuff.js TO web.c The following command line uses a command file: fcarm @fcarm_command_file","title":"Examples"},{"location":"02_fcarm/#directives","text":"","title":"Directives"},{"location":"02_fcarm/#print","text":"The PRINT directive specifies the name of the listing file. If no PRINT directive is specified the listing file is given the name of the generated c-source file with a .LST extension. Abbreviation: PR Arguments: PRINT (filename) Default: The name of the generated listing file with a .LST extension. See also: NOPRINT Example fcarm index.htm, keil.gif to web.c print (Sample.lst)","title":"PRINT"},{"location":"02_fcarm/#noprint","text":"The NOPRINT directive prevents the file converter from generating a listing file. Abbreviation: NOPR Arguments: NOPRINT Default: The name of the generated listing file with a .LST extension. See also: PRINT Example fcarm index.htm, keil.gif to web.c noprint","title":"NOPRINT"},{"location":"02_fcarm/#pagewidth","text":"The PAGEWIDTH directive specifies the number of character per line that may be printed to the converter listing file. Lines with more than the specified number of characters are broken into two or more lines. The valid range of values is 72-132 columns. Abbreviation: PW Arguments: PAGEWIDTH (number) Default: PAGEWIDTH (132) See also: PAGELENGTH Example fcarm index.htm to web.c pagewidth (132)","title":"PAGEWIDTH"},{"location":"02_fcarm/#pagelength","text":"The PAGELENGTH directive specifies the number of lines printed per page in the converter listing file. The minimum page length is 10 lines per page. The maximum page length is 65535. Abbreviation: PL Arguments: PAGELENGTH (number) Default: PAGELENGTH (60) See also: PAGEWIDTH Example fcarm index.htm to web.c pagelength (55)","title":"PAGELENGTH"},{"location":"02_fcarm/#root","text":"The ROOT directive defines the root path where the web files are located relative to the project directory path. Abbreviation: RO Arguments: ROOT (directory) Default: The current project directory path is used as the web container. Example fcarm index.htm, keil.gif to web.c root(Web_Files)","title":"ROOT"},{"location":"03_elfdwt/","text":"Signature creator ElfDwT The command-line utility ElfDwT computes and writes a signature into the application image file. The signature is a checksum required for NXP devices based on Cortex-M processors and must be used with Flash loaders that do not implement this computation automatically. The ULINK Family of Debug and Trace Adapters do compute the signature automatically when used as a Flash loader. Use the application image file as an argument. The result is written back into the image file. If no BASEADDRESS is specified, then the base address 0x00 is assumed. For example: elfdwt blinky.axf Specify a different base address with: elfdwt blinky.axf BASEADDRESS(0x1B000000) Algorithm for creating the checksum The reserved Cortex-M exception vector location 7 (offset 0x001C in the vector table) should contain the 2's complement of the checksum of table entries 0 through 6. This causes the checksum of the first 8 table entries to be 0. The boot loader code checksums the first 8 locations in sector 0 of the flash. If the result is 0, then execution control is transferred to the user code.","title":"ElfDwT"},{"location":"03_elfdwt/#signature-creator-elfdwt","text":"The command-line utility ElfDwT computes and writes a signature into the application image file. The signature is a checksum required for NXP devices based on Cortex-M processors and must be used with Flash loaders that do not implement this computation automatically. The ULINK Family of Debug and Trace Adapters do compute the signature automatically when used as a Flash loader. Use the application image file as an argument. The result is written back into the image file. If no BASEADDRESS is specified, then the base address 0x00 is assumed. For example: elfdwt blinky.axf Specify a different base address with: elfdwt blinky.axf BASEADDRESS(0x1B000000)","title":"Signature creator ElfDwT"},{"location":"03_elfdwt/#algorithm-for-creating-the-checksum","text":"The reserved Cortex-M exception vector location 7 (offset 0x001C in the vector table) should contain the 2's complement of the checksum of table entries 0 through 6. This causes the checksum of the first 8 table entries to be 0. The boot loader code checksums the first 8 locations in sector 0 of the flash. If the result is 0, then execution control is transferred to the user code.","title":"Algorithm for creating the checksum"},{"location":"04_uv2csolution/","text":"uvprojx converter uv2csolution The uv2csolution project file converter allows users of \u00b5Vision to migrate to the new project format CMSIS solution required by CMSIS-Toolbox. Usage Usage: uv2csolution <project.uvprojx | multiproject.uvmpw> | [flags] Flags: -d, --dir string Change output directory for csolution.yml and vcpkg-configuration.json file (e.g. ../ for parent directory) -h, --help Print usage -V, --version Print version Examples Simple conversion uv2csolution MyProject.uvprojx This step generates the following files: MyProject.csolution.yaml MyProject.cproject.yaml vcpkg-configuration.json Multi-project workspace conversion uv2csolution MyProject.uvmpw This step generates the following files: MyProject.csolution.yaml ./MyProject1/MyProject1.cproject.yaml ./MyProject2/MyProject2.cproject.yaml More cproject files in separate directories, depending on the number of projects in the multi-project workspace. vcpkg-configuration.json","title":"uv2csolution"},{"location":"04_uv2csolution/#uvprojx-converter-uv2csolution","text":"The uv2csolution project file converter allows users of \u00b5Vision to migrate to the new project format CMSIS solution required by CMSIS-Toolbox.","title":"uvprojx converter uv2csolution"},{"location":"04_uv2csolution/#usage","text":"Usage: uv2csolution <project.uvprojx | multiproject.uvmpw> | [flags] Flags: -d, --dir string Change output directory for csolution.yml and vcpkg-configuration.json file (e.g. ../ for parent directory) -h, --help Print usage -V, --version Print version","title":"Usage"},{"location":"04_uv2csolution/#examples","text":"Simple conversion uv2csolution MyProject.uvprojx This step generates the following files: MyProject.csolution.yaml MyProject.cproject.yaml vcpkg-configuration.json Multi-project workspace conversion uv2csolution MyProject.uvmpw This step generates the following files: MyProject.csolution.yaml ./MyProject1/MyProject1.cproject.yaml ./MyProject2/MyProject2.cproject.yaml More cproject files in separate directories, depending on the number of projects in the multi-project workspace. vcpkg-configuration.json","title":"Examples"},{"location":"licenses/","text":"Licenses The MDK-Toolbox utilities are provided under the following license terms: The FCARM, ElfDwT, and uv2csolution tools are provided under the MDK v6 license agreement . The Mbed TLS tools cert_write and gen_key are provided under the mbed TLS license argreement .","title":"Licenses"},{"location":"licenses/#licenses","text":"The MDK-Toolbox utilities are provided under the following license terms: The FCARM, ElfDwT, and uv2csolution tools are provided under the MDK v6 license agreement . The Mbed TLS tools cert_write and gen_key are provided under the mbed TLS license argreement .","title":"Licenses"}]}